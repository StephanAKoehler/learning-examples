#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
modifying dpMakeChange
from runestone.academy
https://runestone.academy/runestone/books/published/pythonds/Recursion/DynamicProgramming.html

this improves on original in several ways:
    stores tables of minCoins and coinsUsed for subsequent calls
    stores coinValueList for subsequent calls:
        necessary if new call involves a different coinValuesList, because then the tables need to be regenerated
Created on Sat Jan  2 09:51:12 2021
@author: stephankoehler

"""
import time

def dpMakeChange(coinValueList,change):
#=============================================================================
    try:
        if not coinValueList:
            if coinValueList and not dpMakeChange.coinValueList == coinValueList:
                dpMakeChange.minCoins = 'force error'
        if len( dpMakeChange.minCoins ) < change + 1:
            dpMakeChange.minCoins.extend( [0]*(change+1) )
            dpMakeChange.coinsUsed.extend( [0]*(change+1) ) 
    except AttributeError:
        dpMakeChange.minCoins = [0]*(change+1)
        dpMakeChange.coinsUsed = [0]*(change+1)
        if coinValueList:
            dpMakeChange.coinValueList = coinValueList
        else:
            dpMakeChange.coinValueList = [1]
#============================================================================= 
    for cents in [x for x in range(1, change+1 ) if dpMakeChange.minCoins[x] == 0]:
           dpMakeChange.minCoins[cents] = cents
           dpMakeChange.coinsUsed[cents] = 1
           # print(dpMakeChange.minCoins)
           for j in [c for c in dpMakeChange.coinValueList if c <= cents]:
                 if dpMakeChange.minCoins[cents-j] + 1 < dpMakeChange.minCoins[cents]:
                    dpMakeChange.minCoins[cents] = dpMakeChange.minCoins[cents-j]+1
                    dpMakeChange.coinsUsed[cents] = j
                 # print( j )
           # dpMakeChange.minCoins[cents] = coinCount
           # dpMakeChange.coinsUsed[cents] = newCoin
       
    coin = change
    list_of_coints = [0]*dpMakeChange.minCoins[change]
    count = 0
    while coin > 0:
        list_of_coints[ count ] = dpMakeChange.coinsUsed[coin]
        # print(list_of_coints)
        coin = coin - list_of_coints[ count ]    
        count += 1
    return list_of_coints

def main():
    t = time.time()
    print( dpMakeChange([1, 5, 10], 21) )
    print( dpMakeChange( [], 21) )
    print( time.time() - t )

main()